///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ExcelDatadriveLoopAndCapture
{
    public partial class GatherArticles
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void CheckForNextPageAndSetNextPresent()
        {
        	//Check for "Next" link. If NOT present...
        	if(!repo.EdgewordsTrainingAutomatedSoftware.NextInfo.Exists(10000)){
        		//Set "nextpresent" parameter to false. This prevents further SmartFolder iterations.
        	   	TestSuite.Current.GetTestContainer("SmartFolder").Parameters["nextpresent"] = "false";
        	   	//Logging for debugging purposes.
        		Ranorex.Report.Info("No next link. Set nextpresent parameter to false. Should end iterations.");
        		Ranorex.Report.Info(TestSuite.Current.GetTestContainer("SmartFolder").Parameters["nextpresent"]);
        		Ranorex.Report.Info(nextcheck);
        	}
        }
        
        public void ListArticles(Ranorex.Adapter postsContainer)
        {	
        	
        	var element = postsContainer.GetPath().ToString();
        	
        	postsContainer.EnsureVisible();
        	//IList<Ranorex.ArticleTag> IArticles = postsContainer.As<Ranorex.DivTag>().FindDescendants<Ranorex.ArticleTag>();
        	IList<Ranorex.ArticleTag> IArticles = Host.Local.Find<Ranorex.ArticleTag>(element + "//article",5000);
        	Ranorex.Report.Log(ReportLevel.Info,"There are " + IArticles.Count + " on this page");
        	
        	// Collect article headers
 
        	foreach (Ranorex.ArticleTag articles in IArticles) {
        		string articleheader = articles.FindDescendant<Ranorex.ATag>().InnerText;
        		Ranorex.Report.Info("article",articleheader);
        	}
        }

        public void Mouse_Click_Next(RepoItemInfo spantagInfo)
        {
        	if(TestSuite.Current.GetTestContainer("SmartFolder").Parameters["nextpresent"]=="true"){
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'spantagInfo' at Center.", spantagInfo);
            spantagInfo.FindAdapter<SpanTag>().Click();
        	}
        }

    }
}
